name: Build and Package for Mac
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  mac:
    name: macos
    runs-on: macos-14
    permissions:
      contents: write
    env:
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      CSC_KEY_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Determine version variables
        env:
          GITHUB_REF: ${{ github.ref }}
          VERSION_INPUT: ${{ github.event.inputs.version }}
        run: |
          if [ -n "$VERSION_INPUT" ]; then
            # Manual trigger with version input
            VERSION="$VERSION_INPUT"
          else
            # Tag trigger
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          VERSION_WITHOUT_PRERELEASE=$(echo "$VERSION" | sed 's/-.*//')

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_WITHOUT_PRERELEASE=$VERSION_WITHOUT_PRERELEASE" >> $GITHUB_ENV

          echo "Determined VERSION: $VERSION"
          echo "Determined VERSION_WITHOUT_PRERELEASE: $VERSION_WITHOUT_PRERELEASE"

      - name: Set version from tag or input
        run: npm version "$VERSION" --no-git-tag-version --allow-same-version

      - name: Build
        run: npm run build

      - name: Install Apple Code Signing Certificate
        env:
          APPLE_CERTIFICATES_BUNDLE_BASE64: ${{ secrets.APPLE_CERTIFICATES_BUNDLE_BASE64 }}
          APPLE_CERTIFICATES_BUNDLE_PATH: ${{ runner.temp }}/apple_certificates_bundle.p12
          APPLE_CERTIFICATES_BUNDLE_PASSWORD: ${{ secrets.APPLE_CERTIFICATES_BUNDLE_PASSWORD }}
          KEYCHAIN_PATH: ${{ runner.temp }}/app-signing.keychain-db
        run: |
          echo -n "$APPLE_CERTIFICATES_BUNDLE_BASE64" | base64 --decode -o $APPLE_CERTIFICATES_BUNDLE_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $APPLE_CERTIFICATES_BUNDLE_PATH -k $KEYCHAIN_PATH -f pkcs12 -P "$APPLE_CERTIFICATES_BUNDLE_PASSWORD"

      - name: Install Apple API key
        run: |
          mkdir -p ~/private_keys/
          echo -n "$APPLE_API_KEY" | base64 --decode > ~/private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Install Mac Profiles
        env:
          APPLE_APPLE_DEVELOPMENT_PROFILE: ${{ secrets.APPLE_APPLE_DEVELOPMENT_PROFILE }}
          APPLE_MAC_APP_STORE_PROFILE: ${{ secrets.APPLE_MAC_APP_STORE_PROFILE }}
        run: |
          echo -n "$APPLE_APPLE_DEVELOPMENT_PROFILE" | base64 -d -o build/AppleDevelopment.provisionprofile
          echo -n "$APPLE_MAC_APP_STORE_PROFILE" | base64 -d -o build/MacAppStore.provisionprofile

      - name: Package (Mac)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run package:mac:publish

      - name: Set version from tag or input (without pre-release)
        run: npm version "$VERSION_WITHOUT_PRERELEASE" --no-git-tag-version --allow-same-version

      - name: Package (Mac App Store)
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          echo "Packaging for Mac App Store..."
          npm run package:mac:store

      - name: Submit to App Store Connect
        continue-on-error: true
        run: |
          echo "Submitting to App Store Connect..."

          PKG_FILE=$(find dist -name "*.pkg" -type f | head -1)
          if [[ -z "$PKG_FILE" ]]; then
            echo "Error: No .pkg file found in dist directory"
            exit 1
          fi

          echo "Found package: $PKG_FILE"

          xcrun altool \
            --upload-app \
            --file "$PKG_FILE" \
            --apiKey "$APPLE_API_KEY_ID" \
            --apiIssuer "$APPLE_API_ISSUER" \
            --output-format xml \
            --verbose

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Mac App Store Artifacts
          retention-days: 60
          path: |
            dist/**/*.pkg
